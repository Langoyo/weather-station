{"version":3,"sources":["./src/environments/environment.ts","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","<div *ngIf=\"showDevices;else other_content\">\n  <div class=\"container\">\n    <table class=\"table1\">\n\n\n\n      <tr>\n        <th>Device</th>\n        <th>State</th>\n        <th>Location</th>\n        <th>Date</th>\n\n      </tr>\n      <tr *ngFor=\"let device of devices\">\n\n        <td>\n          {{device[\"device_id\"]}}\n        </td>\n\n        <td>\n          {{device[\"status\"]}}\n        </td>\n\n        <td>\n          {{device[\"location\"]}}\n        </td>\n\n        <td>\n          {{device[\"timestamp\"]}}\n        </td>\n\n        <td class=\"medidas\">\n          <button (click)='getMeasurements(device)'>Measurements</button>\n        </td>\n      </tr>\n      <tr class=\"medidas\">\n        <td class=\"medidas\" colspan=4><button (click)='getDevices()' class=\"fetch\">Fetch</button></td>\n\n      </tr>\n    </table>\n\n  </div>\n</div>\n\n<ng-template #other_content>\n\n  <button (click)='getBack()'>Back</button>\n\n  <div>\n    {{selectedDevice[\"device_id\"]}} - {{selectedDevice[\"status\"]}} - {{selectedDevice[\"location\"]}}\n  </div>\n  <form name=\"myForm\" ng-controller=\"ExampleController\">\n    Start date:\n    <input [(ngModel)]=\"startDate\" type=\"date\" id=\"start\" name=\"start\" value=\"2000-01-08\">\n    End date:\n    <input [(ngModel)]=\"endDate\" type=\"date\" id=\"end\" name=\"end\" value=\"3000-01-08\">\n    Temperature:\n    <select name=\"measurements\" id=\"filtering\" [(ngModel)]=typeMeasurements>\n      <option value=\"temp\">Temperature</option>\n      <option value=\"hum\">Humidity</option>\n      <option value=\"both\" selected=\"selected\">Both</option>\n    </select>\n    \n\n  </form>\n  <button (click)='filterMeasurements()'>Filter</button>\n  <div>\n\n  </div>\n\n  <table class=\"table1\">\n\n\n\n    <tr>\n      <th>Date</th>\n      <th>Temperature</th>\n      <th>Humidity</th>\n\n\n    </tr>\n    <tr *ngFor=\"let measurement of measurements\">\n\n      <td>\n        {{measurement[\"timestamp\"]}}\n      </td>\n\n      <td>\n        {{measurement[\"temperature\"]}}\n      </td>\n\n      <td>\n        {{measurement[\"humidity\"]}}\n      </td>\n\n\n\n\n    </tr>\n  </table>\n\n\n</ng-template>\nHola","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'DSO-final-challenge';\n  devices ={}\n  measurements = {}\n  showDevices = true\n  selectedDevice = {}\n  startDate = '2000-01-01 00:00:00 '\n  endDate = '3000-01-01 00:00:00 '\n  typeMeasurements = 'both'\n  \n\n   getDevices(){\n    fetch('http://35.242.237.140:5001/dso/devices/')\n      .then(response => response.json())\n      .then(data => this.devices = data);\n  \n  }\n\n  getMeasurements(deviceId){\n    this.startDate = '2000-01-01 00:00:00 '\n    this.endDate = '3000-01-01 00:00:00 '\n    this.selectedDevice = deviceId\n    fetch('http://35.242.237.140:5001/dso/devices/query',{\n      method:'post',\n      body:JSON.stringify({\n        \"device_id\":this.selectedDevice[\"device_id\"],\n        \"start_date\":this.startDate,\n        \"end_date\":this.endDate,\n        \"type\":this.typeMeasurements\n    })\n\n    })\n      .then(response => response.json())\n      .then(data => this.measurements = data);\n      \n    \n    this.showDevices = false\n      \n\n  }\n  \n  \n\n\n  filterMeasurements(){\n\n\n\n    fetch('http://35.242.237.140:5001/dso/devices/query',{\n      method:'post',\n      body:JSON.stringify({\n        \"device_id\":this.selectedDevice[\"device_id\"],\n        \"start_date\":this.startDate,\n        \"end_date\":this.endDate,\n        \"type\":this.typeMeasurements\n    })\n\n    })\n      .then(response => response.json())\n      .then(data => this.measurements = data);\n    \n  }\n\n  getBack(){\n    this.showDevices = true\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}